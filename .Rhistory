"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices") +
theme(legend.position = "right")
ggplotly(p, tooltip="text")
runApp()
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices") +
layout(xaxis = list(showgrid = FALSE, showline=FALSE),
yaxis = list(showgrid = FALSE, showline=FALSE))
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices") +
layout(xaxis = list( showline=FALSE),
yaxis = list( showline=FALSE))
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices") +
theme(panel.grid = element_line())
ggplotly(p, tooltip="text")
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices") +
theme(panel.border = element_blank()
ggplotly(p, tooltip="text")
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices") +
theme(panel.border = element_blank())
ggplotly(p, tooltip="text")
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices")
ggplotly(p, tooltip="text")+
theme(panel.border = element_blank())
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices")
ggplotly(p, tooltip="text")+
layout(xaxis = list(showgrid = FALSE))
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices")
ggplotly(p, tooltip="text", layout(xaxis = list(showgrid = FALSE)))
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-10,3),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices")
ggplotly(p, tooltip="text")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(bslib)
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
# load our data -----------------------------------------------------------
# national level statistics  ----------------------------------------------
scotland_df <- read_csv('data/scotland.csv')
england_df <- read_csv('data/england.csv')
wales_df <- read_csv("data/wales.csv")
north_df <- read_csv("data/north_ireland.csv")
# city level statistics  ---------------------------------------------------
belfast_df <- read_csv("data/belfast.csv")
belfast_df <- merge(belfast_df[, !names(belfast_df) %in% c('hospitalCases')], select(north_df, c('date','hospitalCases')), by='date')
#belfast_df$hospitalCases = north_df$hospitalCases
cardiff_df <- read_csv("data/cardiff.csv")
cardiff_df <- merge(cardiff_df[, !names(cardiff_df) %in% c('hospitalCases')], select(wales_df, c('date','hospitalCases')), by='date')
names(cardiff_df)[names(cardiff_df) == 'cumDeaths28DaysByPublishDate'] <- "cumDeaths28DaysByDeathDate"
#cardiff_df$hospitalCases = wales_df$hospitalCases
edinburgh_df <- read_csv("data/edinburgh.csv")
edinburgh_df <- merge(edinburgh_df[, !names(edinburgh_df) %in% c('hospitalCases')], select(scotland_df, c('date','hospitalCases')), by='date')
#edinburgh_df$hospitalCases = scotland_df$hospitalCases
birmingham_df <- read_csv("data/birmingham.csv")
birmingham_df <- merge(birmingham_df[, !names(birmingham_df) %in% c('hospitalCases')], select(england_df, c('date','hospitalCases')), by='date')
#birmingham_df$hospitalCases = england_df$hospitalCases
bristol_df <- read_csv("data/bristol.csv")
bristol_df <- merge(bristol_df[, !names(bristol_df) %in% c('hospitalCases')], select(england_df, c('date','hospitalCases')), by='date')
#bristol_df$hospitalCases = england_df$hospitalCases
cambridge_df <- read_csv("data/cambridge.csv")
cambridge_df <- merge(cambridge_df[, !names(cambridge_df) %in% c('hospitalCases')], select(england_df, c('date','hospitalCases')), by='date')
#cambridge_df$hospitalCases = england_df$hospitalCases
glasgow_df <- read_csv("data/glasgow.csv")
glasgow_df <- merge(glasgow_df[, !names(glasgow_df) %in% c('hospitalCases')], select(scotland_df, c('date','hospitalCases')), by='date')
#glasgow_df$hospitalCases = scotland_df$hospitalCases
# change date columns to date type
cities <- list(belfast_df, cardiff_df, edinburgh_df, birmingham_df, bristol_df, cambridge_df, glasgow_df)
for (city_df in cities){
city_df <- city_df %>%
mutate(date = as.Date(date, format= "%Y-%m-%d"))
}
# vaccine data  -----------------------------------------------------------
belfast_vac_df <- read_csv("data/belfast_vac.csv")
cardiff_vac_df <- read_csv("data/cardiff_vac.csv")
edinburgh_vac_df <- read_csv("data/edinburgh_vac.csv")
birmingham_vac_df <- read_csv("data/birmingham_vac.csv")
bristol_vac_df <- read_csv("data/bristol_vac.csv")
cambridge_vac_df <- read_csv("data/cambridge_vac.csv")
glasgow_vac_df <- read_csv("data/glasgow_vac.csv")
cities <- list(belfast_df, cardiff_df, edinburgh_df, birmingham_df, bristol_df, cambridge_df, glasgow_df)
for (city_df in cities){
print(colnames(city_df))
}
# initialize dataframe with just the headers of a city df
last7days_df <- belfast_df[0,]
# get latest date in data
today <- max(belfast_df$date)
earliest_date <- today - as.difftime(7, unit="days")
# loop through each city df and concatenate the last 7 days data to the last7days_df
for (city_df in cities){
filtered_data <- city_df %>%
filter(date >= earliest_date)
filtered_data[is.na(filtered_data)] <- 0
last7days_df <- rbind(last7days_df, filtered_data)
}
# initialize dataframe with just the headers of a city df
last7days_df <- belfast_df[0,]
# get latest date in data
today <- max(belfast_df$date)
earliest_date <- today - as.difftime(7, unit="days")
# loop through each city df and concatenate the last 7 days data to the last7days_df
for (city_df in cities){
filtered_data <- city_df %>%
filter(date >= earliest_date)
filtered_data[is.na(filtered_data)] <- 0
last7days_df <- rbind(last7days_df, filtered_data)
}
require(maps)
require(viridis)
theme_set(
theme_void()
)
city_nations <- data.frame(matrix(ncol = 2, nrow = 0))
col_names <- c("areaName", "nation")
colnames(city_nations) <- col_names
city_nations[nrow(city_nations) + 1,] <- c('Belfast', 'North Ireland')
city_nations[nrow(city_nations) + 1,] <- c('Cardiff', 'Wales')
city_nations[nrow(city_nations) + 1,] <- c('City of Edinburgh', 'Scotland')
city_nations[nrow(city_nations) + 1,] <- c('Birmingham', 'England')
city_nations[nrow(city_nations) + 1,] <- c('Bristol, City of','England')
city_nations[nrow(city_nations) + 1,] <- c('Cambridgeshire', 'England')
city_nations[nrow(city_nations) + 1,] <- c('Glasgow City', 'Scotland')
city_locations <- data.frame(matrix(ncol = 3, nrow = 0))
col_names <- c("areaName", "lat", "long")
colnames(city_locations) <- col_names
city_locations[nrow(city_locations) + 1,] <- c('Belfast', 54.5973, -5.9301)
city_locations[nrow(city_locations) + 1,] <- c('Cardiff', 51.4837, -3.1681)
city_locations[nrow(city_locations) + 1,] <- c('City of Edinburgh', 55.9533, -3.1883)
city_locations[nrow(city_locations) + 1,] <- c('Birmingham', 52.4862, -1.8904)
city_locations[nrow(city_locations) + 1,] <- c('Bristol, City of', 51.4545, -2.5879)
city_locations[nrow(city_locations) + 1,] <- c('Cambridgeshire', 52.2053, -0.1218)
city_locations[nrow(city_locations) + 1,] <- c('Glasgow City', 55.8642, -4.2518)
# get totals from last 7 days by city
last7days_df_summarize <- aggregate(cbind(cumCasesByPublishDate,cumDeaths28DaysByDeathDate, hospitalCases, newCasesByPublishDate, newDeaths28DaysByPublishDate)~areaName, last7days_df, sum)
# merge long lat data with last 7 days data
last7days_df_summarize <- merge(last7days_df_summarize, city_locations, by='areaName')
world_map <- map_data("world", region="UK")
p <-ggplot() +
geom_polygon(data = world_map,
aes(x = long, y = lat, group=group),
fill="lightgrey", colour = "white") +
coord_fixed(ratio = 1.3,
xlim = c(-7,1),
ylim = c(50, 59)) +
theme_void() +
geom_point(data = last7days_df_summarize,
aes(x = as.numeric(long), y = as.numeric(lat),
size = newCasesByPublishDate,
text = paste("City: ", areaName,
"<br>Total New Cases: ", newCasesByPublishDate,
"<br>Total New Deaths: ", newDeaths28DaysByPublishDate))) +
labs(title = "Cities with Company X Corporate Offices")
ggplotly(p, tooltip="text")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == selected_city)
line_p <- ggplot(filter_data, aes(x=date,y=newCasesByPublishDate))
ggplotly(line_p, tooltip="text")
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
head(filter_data)
#line_p <- ggplot(filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#line_p <-
ggplot(filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#line_p <-
ggplot(filter_data, aes(x=date,y=newCasesByPublishDate)) + geom_line()
#ggplotly(line_p, tooltip="text")
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#line_p <-
line_p <- ggplot()+geom_line(filter_data, aes(x=date,y=newCasesByPublishDate))
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#line_p <-
line_p <- ggplot()+geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#line_p <-
line_p <- ggplot()+geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
ggplotly(line_p, tooltip="text")
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#line_p <-
line_p <- ggplot()+
geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
line_p
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
theme_set(theme_bw())
#line_p <-
line_p <- ggplot()+
geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
line_p
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
theme_set(theme_grey())
#line_p <-
line_p <- ggplot()+
geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
line_p
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#theme_set(theme_grey())
#line_p <-
line_p <- ggplot()+
geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
#ggplotly(line_p, tooltip="text")
line_p
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#theme_set(theme_grey())
#line_p <-
line_p <- ggplot()+
geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))
ggplotly(line_p, tooltip="text")
#line_p
selected_city <- "Belfast"
filter_data <- last7days_df %>%
filter(areaName == "Belfast")
#head(filter_data)
#theme_set(theme_grey())
#line_p <-
line_p <- ggplot()+
geom_line(data=filter_data, aes(x=date,y=newCasesByPublishDate))+
labs(x = "Date",y = "Number of Cases")
ggplotly(line_p, tooltip="text")
#line_p
runApp()
runApp()
runApp()
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=T,
cache=F,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(tidyverse)
library(flair)
library(ggthemes)
decorate('ggplot(data = DATA) +
GEOM_FUNCTION(mapping = aes(AESTHETIC MAPPINGS))', eval = F) %>%
flair("DATA", background = "#CBB5FF", before = "<b>", after = "</b>") %>%
flair("GEOM_FUNCTION", background = "#FFDFD1", before = "<b>", after = "</b>") %>%
flair("AESTHETIC MAPPINGS", background = "#FFD0CF", before = "<b>", after = "</b>") %>%
knit_print.with_flair()
eg <- tribble(
~x, ~y, ~size, ~x1,
"A", 1, 5, 1,
"B", 1, 10, 2,
"C", 1, 15, 3
)
# Color, discrete
ggplot(eg, aes(x = x, y = y, color = x)) +
geom_point(size = 30) +
guides(color = FALSE) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
# Color, continuous
ggplot(eg, aes(x = x1, y = y, color = x1)) +
geom_point(size = 30) +
guides(color = FALSE) +
coord_cartesian(xlim = c(0.5, 3.5)) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
# Size
ggplot(eg, aes(x = x, y = y, size = x)) +
geom_point() +
scale_size_discrete(range = c(2, 30)) +
guides(size = FALSE) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
# Fill
ggplot(eg, aes(x = x, y = y, fill = x)) +
geom_point(size = 30, pch = 21, stroke = 5) +
guides(fill = FALSE) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
# Shape
ggplot(eg, aes(x = x, y = y, shape = x)) +
geom_point(size = 30) +
guides(shape = FALSE) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
# Alpha
ggplot(eg, aes(x = x, y = y, alpha = x)) +
geom_point(size = 30) +
guides(alpha = FALSE) +
theme(axis.text.y = element_blank(),
axis.ticks = element_blank())
install.packages('nbapalettes')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("hash")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
